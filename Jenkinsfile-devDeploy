//Groovy Pipeline
node () { //node('worker_node')
   properties([
      parameters([
           string(defaultValue: '', name: 'VERSION', trim: true, description: 'If VERSION is specified, artifact will be downloaded from Repository'),
           choice(choices: ["dweblnl025", "dapplnl052"], name: 'SERVER'),
      ]),
      disableConcurrentBuilds()
   ])
   
   def IS_RELEASE = false
   def artifactId = 'cboss-common-services'
   try {
     stage ('Artifactory Configuration') {
       server = Artifactory.server 'DSYNC_JFROG_INSTANCE'
     }
      
     stage('Download Artifact') {
       echo "Downloading Artifact ${artifactId} with Version ${params.VERSION} from Artifactory"
       ARTIFACT_ALREADY_PRESENT = checkIfArtifactAlreadyExistInRepo("${artifactId}" ,
                                                                                "${params.VERSION}" , 
                                                                                "${params.VERSION}".contains("SNAPSHOT") ? false : true,
                                                                                 server)
       if(ARTIFACT_ALREADY_PRESENT){
         echo "Successfully downloaded Artifact ${artifactId} with Version ${params.VERSION}"
       } else {
         echo "Artifact ${artifactId} with Version ${params.VERSION} not found"
       }                                                                         
     }//Download Artifact ends here
      
     
     stage('Publish To Application/Web Server') {
       echo "Deploying to default tomcat server ${params.SERVER}"
       targetFolder = prepareTargetFolder("${artifactId}" , "${params.version}" , version.contains("SNAPSHOT"))
       deploy adapters: [tomcat8(url: "http://localhost:8082/", credentialsId: 'tomcat')], war: "${targetFolder}/*.war", contextPath: "${artifactId}"
     }//Publish To Application/Web Server stage ends here
     currentBuild.result = 'SUCCESS'
   } catch(Exception err) {
      echo "Error occurred while running the job '${env.JOB_NAME}' , $err"
      currentBuild.result = 'FALIURE'
   } finally {
       //deleteDir()
   }
   
}


def downloadArtifacts(String pattern, String target , Object server){
  echo "Downloading artifact against pattern ${pattern}  ,Target folder ${target}"
  def downloadSpec = """{
                          "files": [
                                     {
                                       "pattern": "${pattern}",
                                       "target": "${target}",
                                       "recursive": "true",
                                       "flat" : "true",
                                       "sortBy" : [ "created" ],
                                       "sortOrder" : "desc",
                                       "limit": "1"
                                     }
                                   ]
                        }"""
  def buildInfo
  try{
   buildInfo = server.download spec: downloadSpec, failNoOp: true
   server.publishBuildInfo buildInfo
  }catch(err){
    echo "Error occurred while running the job' , $err"
    buildInfo = null
  }
  return buildInfo                 
}

def checkIfArtifactAlreadyExistInRepo(String artifactId, String version, boolean validateSnapshots, Object server){
  def artifactBuildInfo = downloadArtifacts( 
                                             prepareSearchPattern(artifactId , version , validateSnapshots),
                                             prepareTargetFolder(artifactId , version , validateSnapshots),
											 server
                                           )
  if(artifactBuildInfo == null){
    return false
  }             
  return true
}


def prepareTargetFolder(String artifactId, String version, boolean downloadSnapshot){
   def targetFolderInfix = downloadSnapshot ? "SNAPSHOTS" : "RELEASES"
   //def targetFolder = "${artifactId}/${targetFolderInfix}/${version}/"
   def targetFolder = "${artifactId}/${version}/"
   return targetFolder
}

def prepareSearchPattern(String artifactId, String version , boolean downloadSnapshot) {
   version = !downloadSnapshot && version.contains("SNAPSHOT") ? version.replace("-SNAPSHOT" , "") : version
   def repositoryName = downloadSnapshot ? "cetera-maven-snapshots" : "cetera-maven-releases"
   def pattern = "${repositoryName}/com/cetera/${artifactId}/${version}/${artifactId}-*.war"
   return pattern
}